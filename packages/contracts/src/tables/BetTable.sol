// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { BetStatus } from "./../Types.sol";

uint256 constant _tableId = uint256(bytes32(abi.encodePacked(bytes16(""), bytes16("BetTable"))));
uint256 constant BetTableTableId = _tableId;

struct BetTableData {
  address player;
  uint256 deltaX;
  int256 deltaY;
  int256 result;
  BetStatus resolution;
  uint256 wager;
  uint256 payout;
  uint256 odds;
  bool[5] wentUp;
}

library BetTable {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](9);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.INT256;
    _schema[3] = SchemaType.INT256;
    _schema[4] = SchemaType.UINT8;
    _schema[5] = SchemaType.UINT256;
    _schema[6] = SchemaType.UINT256;
    _schema[7] = SchemaType.UINT256;
    _schema[8] = SchemaType.BOOL_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](9);
    _fieldNames[0] = "player";
    _fieldNames[1] = "deltaX";
    _fieldNames[2] = "deltaY";
    _fieldNames[3] = "result";
    _fieldNames[4] = "resolution";
    _fieldNames[5] = "wager";
    _fieldNames[6] = "payout";
    _fieldNames[7] = "odds";
    _fieldNames[8] = "wentUp";
    return ("BetTable", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get player */
  function getPlayer(uint256 block) internal view returns (address player) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get player (using the specified store) */
  function getPlayer(IStore _store, uint256 block) internal view returns (address player) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set player */
  function setPlayer(uint256 block, address player) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    StoreSwitch.setField(_tableId, _primaryKeys, 0, abi.encodePacked((player)));
  }

  /** Set player (using the specified store) */
  function setPlayer(IStore _store, uint256 block, address player) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    _store.setField(_tableId, _primaryKeys, 0, abi.encodePacked((player)));
  }

  /** Get deltaX */
  function getDeltaX(uint256 block) internal view returns (uint256 deltaX) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get deltaX (using the specified store) */
  function getDeltaX(IStore _store, uint256 block) internal view returns (uint256 deltaX) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set deltaX */
  function setDeltaX(uint256 block, uint256 deltaX) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    StoreSwitch.setField(_tableId, _primaryKeys, 1, abi.encodePacked((deltaX)));
  }

  /** Set deltaX (using the specified store) */
  function setDeltaX(IStore _store, uint256 block, uint256 deltaX) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    _store.setField(_tableId, _primaryKeys, 1, abi.encodePacked((deltaX)));
  }

  /** Get deltaY */
  function getDeltaY(uint256 block) internal view returns (int256 deltaY) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 2);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Get deltaY (using the specified store) */
  function getDeltaY(IStore _store, uint256 block) internal view returns (int256 deltaY) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 2);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Set deltaY */
  function setDeltaY(uint256 block, int256 deltaY) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    StoreSwitch.setField(_tableId, _primaryKeys, 2, abi.encodePacked((deltaY)));
  }

  /** Set deltaY (using the specified store) */
  function setDeltaY(IStore _store, uint256 block, int256 deltaY) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    _store.setField(_tableId, _primaryKeys, 2, abi.encodePacked((deltaY)));
  }

  /** Get result */
  function getResult(uint256 block) internal view returns (int256 result) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 3);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Get result (using the specified store) */
  function getResult(IStore _store, uint256 block) internal view returns (int256 result) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 3);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Set result */
  function setResult(uint256 block, int256 result) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    StoreSwitch.setField(_tableId, _primaryKeys, 3, abi.encodePacked((result)));
  }

  /** Set result (using the specified store) */
  function setResult(IStore _store, uint256 block, int256 result) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    _store.setField(_tableId, _primaryKeys, 3, abi.encodePacked((result)));
  }

  /** Get resolution */
  function getResolution(uint256 block) internal view returns (BetStatus resolution) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 4);
    return BetStatus(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get resolution (using the specified store) */
  function getResolution(IStore _store, uint256 block) internal view returns (BetStatus resolution) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 4);
    return BetStatus(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set resolution */
  function setResolution(uint256 block, BetStatus resolution) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    StoreSwitch.setField(_tableId, _primaryKeys, 4, abi.encodePacked(uint8(resolution)));
  }

  /** Set resolution (using the specified store) */
  function setResolution(IStore _store, uint256 block, BetStatus resolution) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    _store.setField(_tableId, _primaryKeys, 4, abi.encodePacked(uint8(resolution)));
  }

  /** Get wager */
  function getWager(uint256 block) internal view returns (uint256 wager) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 5);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get wager (using the specified store) */
  function getWager(IStore _store, uint256 block) internal view returns (uint256 wager) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 5);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set wager */
  function setWager(uint256 block, uint256 wager) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    StoreSwitch.setField(_tableId, _primaryKeys, 5, abi.encodePacked((wager)));
  }

  /** Set wager (using the specified store) */
  function setWager(IStore _store, uint256 block, uint256 wager) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    _store.setField(_tableId, _primaryKeys, 5, abi.encodePacked((wager)));
  }

  /** Get payout */
  function getPayout(uint256 block) internal view returns (uint256 payout) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 6);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get payout (using the specified store) */
  function getPayout(IStore _store, uint256 block) internal view returns (uint256 payout) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 6);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set payout */
  function setPayout(uint256 block, uint256 payout) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    StoreSwitch.setField(_tableId, _primaryKeys, 6, abi.encodePacked((payout)));
  }

  /** Set payout (using the specified store) */
  function setPayout(IStore _store, uint256 block, uint256 payout) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    _store.setField(_tableId, _primaryKeys, 6, abi.encodePacked((payout)));
  }

  /** Get odds */
  function getOdds(uint256 block) internal view returns (uint256 odds) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 7);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get odds (using the specified store) */
  function getOdds(IStore _store, uint256 block) internal view returns (uint256 odds) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 7);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set odds */
  function setOdds(uint256 block, uint256 odds) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    StoreSwitch.setField(_tableId, _primaryKeys, 7, abi.encodePacked((odds)));
  }

  /** Set odds (using the specified store) */
  function setOdds(IStore _store, uint256 block, uint256 odds) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    _store.setField(_tableId, _primaryKeys, 7, abi.encodePacked((odds)));
  }

  /** Get wentUp */
  function getWentUp(uint256 block) internal view returns (bool[5] memory wentUp) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 8);
    return toStaticArray_bool_5(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bool());
  }

  /** Get wentUp (using the specified store) */
  function getWentUp(IStore _store, uint256 block) internal view returns (bool[5] memory wentUp) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 8);
    return toStaticArray_bool_5(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bool());
  }

  /** Set wentUp */
  function setWentUp(uint256 block, bool[5] memory wentUp) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    StoreSwitch.setField(_tableId, _primaryKeys, 8, EncodeArray.encode(fromStaticArray_bool_5(wentUp)));
  }

  /** Set wentUp (using the specified store) */
  function setWentUp(IStore _store, uint256 block, bool[5] memory wentUp) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    _store.setField(_tableId, _primaryKeys, 8, EncodeArray.encode(fromStaticArray_bool_5(wentUp)));
  }

  /** Push an element to wentUp */
  function pushWentUp(uint256 block, bool _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    StoreSwitch.pushToField(_tableId, _primaryKeys, 8, abi.encodePacked((_element)));
  }

  /** Push an element to wentUp (using the specified store) */
  function pushWentUp(IStore _store, uint256 block, bool _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    _store.pushToField(_tableId, _primaryKeys, 8, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get(uint256 block) internal view returns (BetTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint256 block) internal view returns (BetTableData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    bytes memory _blob = _store.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    uint256 block,
    address player,
    uint256 deltaX,
    int256 deltaY,
    int256 result,
    BetStatus resolution,
    uint256 wager,
    uint256 payout,
    uint256 odds,
    bool[5] memory wentUp
  ) internal {
    bytes memory _data = encode(player, deltaX, deltaY, result, resolution, wager, payout, odds, wentUp);

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    StoreSwitch.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint256 block,
    address player,
    uint256 deltaX,
    int256 deltaY,
    int256 result,
    BetStatus resolution,
    uint256 wager,
    uint256 payout,
    uint256 odds,
    bool[5] memory wentUp
  ) internal {
    bytes memory _data = encode(player, deltaX, deltaY, result, resolution, wager, payout, odds, wentUp);

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    _store.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using the data struct */
  function set(uint256 block, BetTableData memory _table) internal {
    set(
      block,
      _table.player,
      _table.deltaX,
      _table.deltaY,
      _table.result,
      _table.resolution,
      _table.wager,
      _table.payout,
      _table.odds,
      _table.wentUp
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint256 block, BetTableData memory _table) internal {
    set(
      _store,
      block,
      _table.player,
      _table.deltaX,
      _table.deltaY,
      _table.result,
      _table.resolution,
      _table.wager,
      _table.payout,
      _table.odds,
      _table.wentUp
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (BetTableData memory _table) {
    // 213 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 213));

    _table.player = (address(Bytes.slice20(_blob, 0)));

    _table.deltaX = (uint256(Bytes.slice32(_blob, 20)));

    _table.deltaY = (int256(uint256(Bytes.slice32(_blob, 52))));

    _table.result = (int256(uint256(Bytes.slice32(_blob, 84))));

    _table.resolution = BetStatus(uint8(Bytes.slice1(_blob, 116)));

    _table.wager = (uint256(Bytes.slice32(_blob, 117)));

    _table.payout = (uint256(Bytes.slice32(_blob, 149)));

    _table.odds = (uint256(Bytes.slice32(_blob, 181)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 213) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 245;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.wentUp = toStaticArray_bool_5(SliceLib.getSubslice(_blob, _start, _end).decodeArray_bool());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    address player,
    uint256 deltaX,
    int256 deltaY,
    int256 result,
    BetStatus resolution,
    uint256 wager,
    uint256 payout,
    uint256 odds,
    bool[5] memory wentUp
  ) internal view returns (bytes memory) {
    uint16[] memory _counters = new uint16[](1);
    _counters[0] = uint16(wentUp.length * 1);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        player,
        deltaX,
        deltaY,
        result,
        resolution,
        wager,
        payout,
        odds,
        _encodedLengths.unwrap(),
        EncodeArray.encode(fromStaticArray_bool_5(wentUp))
      );
  }

  /* Delete all data for given keys */
  function deleteRecord(uint256 block) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint256 block) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((block)));

    _store.deleteRecord(_tableId, _primaryKeys);
  }
}

function toStaticArray_bool_5(bool[] memory _value) pure returns (bool[5] memory _result) {
  // in memory static arrays are just dynamic arrays without the length byte
  assembly {
    _result := add(_value, 0x20)
  }
}

function fromStaticArray_bool_5(bool[5] memory _value) view returns (bool[] memory _result) {
  _result = new bool[](5);
  uint256 fromPointer;
  uint256 toPointer;
  assembly {
    fromPointer := _value
    toPointer := add(_result, 0x20)
  }
  Memory.copy(fromPointer, toPointer, 160);
}
